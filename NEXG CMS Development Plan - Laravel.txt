NEXG CMS Development Plan
Project Architecture Overview

Backend (Laravel - nexg-web-admin):
- Laravel 12 with JWT Authentication
- Admin Panel CMS Interface (similar design to AdminLTE) for 3 user roles
- RESTful API for Angular frontend communication
- Role-based access control system
- Use Bootstrap 5.3.8 and FontAwesome 7

Frontend (Angular - nexg-web):
- Public-facing website for guests
- Consumes Laravel API endpoints
- Dynamic content rendering from CMS

======================================================

COMPONENT OF NEXG CMS
(the ones with ">" are the dropdowns, the ones with "•" are the subsections):

1. Dashboard (displays website analytics)

2. Header
[Dropdown]
> Header Menu

3. Homepage
[Dropdown]
> Slide Banner
> Investor Info (by external vendor)
> Media News
> Services
     • Security Printing
     • Digital Solutions
> Events & Activities

4. About Us
[Dropdown]
> Corporate Overview
> Vision & Mission
> Leadership Team
> Corporate Structure
> Awards

5. Security Printing
[Dropdown]
> National Security Documents (Manufacturing, Printing & Digitalisation)
   • National Identity Card
   • National Digital Identity
   • ICAO-compliant ePassport
   • Driving License Card
   • Foreign Workers ID Card
   • National-controlled Documents
> Financial Banking Cards
   • EMV-certified Debit/Credit Card Personalisation

6. Digital Solutions
[Dropdown]
> Border Control
   • Automated Border Control Clearance Solution
   • Multimodal Biometrics
   • Digital Travel Credentials
   • Secure VISA Management
> Financial Banking Cards
   • Terminals & Digital Banking Kiosks
   • Digital Payment Solutions
> eKYC
   • Customer Identity Assurance (CIDA) Ecosystem
> National Datasets Management
   • Data Analytics
   • Artificial Intelligence Dash Board Reporting
   • Customised Solutions
> Other Solutions
 • Perimeter Security & Surveillance
 • Healthcare Products & Solutions
 • Unmanned Aircraft System Traffic Management System

7. News 
> Media News
> Events & Activities

8. Sustainability
> Content

9. Careers
> Content

10. Contact Us
> Contact Form
> Company Details
> Location Maps

11. Footer
> Footer Menu

12. User Management
> All Users

User Requirements:
- Administrator – handles everything in CMS (all components)
- Commercial team – content management except user management (component 3 until 10)
- IT team – user management only (component 12 only)
- Need User Profile Management for users in Header

======================================================

Phase 1: Foundation Setup

// Laravel Backend Structure Code (Example)

nexg-web-admin/
├── app/
│   ├── Http/
│   │   ├── Controllers/
│   │   │   ├── API/
│   │   │   │   ├── AuthController.php
│   │   │   │   ├── DashboardController.php
│   │   │   │   ├── HeaderController.php
│   │   │   │   ├── SlideBannerController.php
│   │   │   │   ├── MediaNewsController.php
│   │   │   │   ├── EventsActivitiesController.php
│   │   │   │   ├── ServicesController.php
│   │   │   │   ├── AboutUsController.php
│   │   │   │   ├── LeadershipController.php
│   │   │   │   ├── CorporateController.php
│   │   │   │   ├── SustainabilityController.php
│   │   │   │   ├── CareersController.php
│   │   │   │   ├── ContactUsController.php
│   │   │   │   ├── FooterController.php
│   │   │   │   └── UserManagementController.php
│   │   │   └── Admin/
│   │   │       ├── DashboardController.php
│   │   │       ├── ContentController.php
│   │   │       └── UserController.php
│   │   ├── Middleware/
│   │   │   ├── JwtAuthMiddleware.php
│   │   │   ├── RolePermissionMiddleware.php
│   │   │   ├── AdminMiddleware.php
│   │   │   └── CorsMiddleware.php
│   │   ├── Requests/
│   │   │   ├── Auth/
│   │   │   │   ├── LoginRequest.php
│   │   │   │   └── RegisterRequest.php
│   │   │   ├── SlideBanner/
│   │   │   │   ├── CreateSlideBannerRequest.php
│   │   │   │   └── UpdateSlideBannerRequest.php
│   │   │   ├── MediaNews/
│   │   │   │   ├── CreateMediaNewsRequest.php
│   │   │   │   └── UpdateMediaNewsRequest.php
│   │   │   └── User/
│   │   │       ├── CreateUserRequest.php
│   │   │       └── UpdateUserRequest.php
│   │   └── Resources/
│   │       ├── UserResource.php
│   │       ├── SlideBannerResource.php
│   │       ├── MediaNewsResource.php
│   │       └── DashboardResource.php
│   ├── Models/
│   │   ├── User.php
│   │   ├── Role.php
│   │   ├── UserRole.php
│   │   ├── Header.php
│   │   ├── SlideBanner.php
│   │   ├── MediaNews.php
│   │   ├── EventsActivities.php
│   │   ├── Service.php
│   │   ├── LeadershipTeam.php
│   │   ├── LeadershipTeamMember.php
│   │   ├── CorporateOverview.php
│   │   ├── CorporateStructure.php
│   │   ├── CorporateMilestone.php
│   │   ├── Award.php
│   │   ├── Sustainability.php
│   │   ├── Career.php
│   │   ├── ContactUs.php
│   │   └── Footer.php
│   ├── Services/
│   │   ├── AuthService.php
│   │   ├── FileUploadService.php
│   │   ├── AnalyticsService.php
│   │   ├── PermissionService.php
│   │   ├── ContentService.php
│   │   └── SlugService.php
│   └── Traits/
│       ├── HasRoles.php
│       ├── HasPermissions.php
│       └── Uploadable.php
├── database/
│   ├── migrations/
│   │   ├── 2024_01_01_000000_create_roles_table.php
│   │   ├── 2024_01_01_000001_create_users_table.php
│   │   ├── 2024_01_01_000002_create_user_roles_table.php
│   │   ├── 2024_01_01_000003_create_headers_table.php
│   │   ├── 2024_01_01_000004_create_slide_banners_table.php
│   │   ├── 2024_01_01_000005_create_media_news_table.php
│   │   ├── 2024_01_01_000006_create_events_activities_table.php
│   │   ├── 2024_01_01_000007_create_services_table.php
│   │   ├── 2024_01_01_000008_create_leadership_teams_table.php
│   │   ├── 2024_01_01_000009_create_leadership_team_members_table.php
│   │   ├── 2024_01_01_000010_create_corporate_tables.php
│   │   ├── 2024_01_01_000011_create_awards_table.php
│   │   ├── 2024_01_01_000012_create_sustainability_table.php
│   │   ├── 2024_01_01_000013_create_careers_table.php
│   │   ├── 2024_01_01_000014_create_contact_us_table.php
│   │   └── 2024_01_01_000015_create_footer_table.php
│   ├── seeders/
│   │   ├── DatabaseSeeder.php
│   │   ├── RoleSeeder.php
│   │   ├── UserSeeder.php
│   │   └── ContentSeeder.php
│   └── factories/
│       ├── UserFactory.php
│       └── ContentFactory.php
├── resources/
│   ├── views/
│   │   ├── admin/
│   │   │   ├── layouts/
│   │   │   │   ├── app.blade.php
│   │   │   │   ├── navigation.blade.php
│   │   │   │   └── sidebar.blade.php
│   │   │   ├── dashboard/
│   │   │   │   ├── index.blade.php
│   │   │   │   ├── analytics.blade.php
│   │   │   │   └── countries.blade.php
│   │   │   ├── content/
│   │   │   │   ├── banners/
│   │   │   │   ├── news/
│   │   │   │   ├── events/
│   │   │   │   └── services/
│   │   │   ├── about/
│   │   │   │   ├── overview.blade.php
│   │   │   │   ├── leadership.blade.php
│   │   │   │   └── structure.blade.php
│   │   │   └── users/
│   │   │       ├── index.blade.php
│   │   │       ├── create.blade.php
│   │   │       └── edit.blade.php
│   │   └── auth/
│   │       ├── login.blade.php
│   │       └── register.blade.php
│   └── js/
│       ├── admin.js
│       └── components/
├── routes/
│   ├── api.php
│   ├── web.php
│   └── admin.php
├── storage/
│   └── app/
│       └── public/
│           ├── uploads/
│           │   ├── banners/
│           │   ├── news/
│           │   ├── events/
│           │   ├── services/
│           │   ├── leadership/
│           │   ├── corporate/
│           │   ├── awards/
│           │   └── avatars/
└── public/
    ├── storage/ (symlink)
    └── assets/
        ├── admin/
        │   ├── css/
        │   ├── js/
        │   └── images/

/// Angular Frontend Structure Code ///
nexg-web/
├── src/
│   ├── app/
│   │   ├── core/
│   │   │   ├── guards/
│   │   │   │   └── auth.guard.ts
│   │   │   ├── interceptors/
│   │   │   │   ├── auth.interceptor.ts
│   │   │   │   ├── error.interceptor.ts
│   │   │   │   └── loading.interceptor.ts
│   │   │   ├── services/
│   │   │   │   ├── api.service.ts
│   │   │   │   ├── auth.service.ts
│   │   │   │   ├── content.service.ts
│   │   │   │   └── seo.service.ts
│   │   │   └── models/
│   │   │       ├── user.model.ts
│   │   │       ├── content.model.ts
│   │   │       └── api-response.model.ts
│   │   ├── shared/
│   │   │   ├── components/
│   │   │   │   ├── header/
│   │   │   │   │   ├── header.component.ts
│   │   │   │   │   ├── header.component.html
│   │   │   │   │   └── header.component.scss
│   │   │   │   ├── footer/
│   │   │   │   ├── navigation/
│   │   │   │   ├── breadcrumb/
│   │   │   │   ├── loader/
│   │   │   │   └── modal/
│   │   │   ├── pipes/
│   │   │   │   ├── date-format.pipe.ts
│   │   │   │   └── truncate.pipe.ts
│   │   │   └── directives/
│   │   │       └── lazy-load.directive.ts
│   │   ├── features/
│   │   │   ├── home/
│   │   │   │   ├── components/
│   │   │   │   │   ├── hero-slider/
│   │   │   │   │   ├── news-section/
│   │   │   │   │   └── services-preview/
│   │   │   │   ├── home.component.ts
│   │   │   │   ├── home.component.html
│   │   │   │   └── home.component.scss
│   │   │   ├── about-us/
│   │   │   │   ├── components/
│   │   │   │   │   ├── corporate-overview/
│   │   │   │   │   ├── leadership-team/
│   │   │   │   │   ├── vision-mission/
│   │   │   │   │   └── awards/
│   │   │   │   └── about-us-routing.module.ts
│   │   │   ├── security-printing/
│   │   │   │   ├── components/
│   │   │   │   └── security-printing.component.ts
│   │   │   ├── digital-solutions/
│   │   │   │   ├── components/
│   │   │   │   └── digital-solutions.component.ts
│   │   │   ├── news/
│   │   │   │   ├── components/
│   │   │   │   │   ├── news-list/
│   │   │   │   │   ├── news-detail/
│   │   │   │   │   └── news-card/
│   │   │   │   └── news-routing.module.ts
│   │   │   ├── sustainability/
│   │   │   ├── careers/
│   │   │   └── contact/
│   │   │       ├── components/
│   │   │       │   ├── contact-form/
│   │   │       │   ├── company-details/
│   │   │       │   └── location-map/
│   │   │       └── contact.component.ts
│   │   ├── app-routing.module.ts
│   │   ├── app.component.ts
│   │   ├── app.component.html
│   │   └── app.module.ts
│   ├── assets/
│   │   ├── images/
│   │   │   ├── banners/
│   │   │   ├── news/
│   │   │   ├── services/
│   │   │   └── placeholders/
│   │   ├── scss/
│   │   │   ├── abstracts/
│   │   │   ├── components/
│   │   │   ├── layout/
│   │   │   └── main.scss
│   │   └── js/
│   └── environments/
│       ├── environment.ts
│       └── environment.prod.ts


Phase 2: Core Implementation Strategy*
1. Authentication & User Management (Component 12)
Start Here First:

PHP
// app/Models/User.php - Enhanced User Model
<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Tymon\JWTAuth\Contracts\JWTSubject;
use App\Traits\HasRoles;

class User extends Authenticatable implements JWTSubject
{
    use HasFactory, Notifiable, HasRoles;
    
    protected $fillable = [
        'user_id', 'avatar_image', 'first_name', 'last_name', 
        'email', 'username', 'password', 'role_id', 'is_active'
    ];
    
    protected $hidden = ['password', 'remember_token'];
    
    protected $casts = [
        'role_permissions' => 'array',
        'email_verified_at' => 'datetime',
        'last_login_access' => 'datetime',
        'is_active' => 'boolean'
    ];
    
    // JWT Implementation
    public function getJWTIdentifier() { return $this->getKey(); }
    public function getJWTCustomClaims() { return []; }
    
    // Relationships
    public function role() { return $this->belongsTo(Role::class); }
    public function userRoles() { return $this->hasMany(UserRole::class); }
}

2. Role-Based Permission System
PHP
// app/Services/PermissionService.php
<?php
namespace App\Services;

class PermissionService
{
    public static function getPermissionMatrix()
    {
        return [
            'administrator' => [
                'dashboard' => ['view', 'analytics'],
                'header' => ['view', 'create', 'edit', 'delete'],
                'homepage' => ['view', 'create', 'edit', 'delete'],
                'about_us' => ['view', 'create', 'edit', 'delete'],
                'security_printing' => ['view', 'create', 'edit', 'delete'],
                'digital_solutions' => ['view', 'create', 'edit', 'delete'],
                'news' => ['view', 'create', 'edit', 'delete'],
                'sustainability' => ['view', 'create', 'edit', 'delete'],
                'careers' => ['view', 'create', 'edit', 'delete'],
                'contact_us' => ['view', 'create', 'edit', 'delete'],
                'footer' => ['view', 'create', 'edit', 'delete'],
                'user_management' => ['view', 'create', 'edit', 'delete', 'invite']
            ],
            'commercial_team' => [
                'dashboard' => ['view'],
                'header' => ['view', 'create', 'edit', 'delete'],
                'homepage' => ['view', 'create', 'edit', 'delete'],
                'about_us' => ['view', 'create', 'edit', 'delete'],
                'security_printing' => ['view', 'create', 'edit', 'delete'],
                'digital_solutions' => ['view', 'create', 'edit', 'delete'],
                'news' => ['view', 'create', 'edit', 'delete'],
                'sustainability' => ['view', 'create', 'edit', 'delete'],
                'careers' => ['view', 'create', 'edit', 'delete'],
                'contact_us' => ['view', 'create', 'edit', 'delete'],
                'footer' => ['view', 'create', 'edit', 'delete'],
                'user_management' => ['view_only']
            ],
            'it_team' => [
                'dashboard' => ['view'],
                'user_management' => ['view', 'create', 'edit', 'delete', 'invite']
            ]
        ];
    }
}

3. Dashboard Analytics Implementation (Component 1)
PHP
// app/Http/Controllers/API/DashboardController.php
<?php
namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Services\AnalyticsService;
use Illuminate\Http\Request;

class DashboardController extends Controller
{
    protected $analyticsService;
    
    public function __construct(AnalyticsService $analyticsService)
    {
        $this->analyticsService = $analyticsService;
    }
    
    public function getWebTraffic(Request $request)
    {
        $dateRange = $request->get('date_range', 'week');
        
        return response()->json([
            'total_unique_pageviews' => $this->analyticsService->getTotalUniquePageviews($dateRange),
            'average_time_on_page' => $this->analyticsService->getAverageTimeOnPage($dateRange),
            'page_exit_percentage' => $this->analyticsService->getPageExitPercentage($dateRange),
            'bounce_percentage' => $this->analyticsService->getBounceRate($dateRange),
            'device_sessions' => $this->analyticsService->getDeviceSessions($dateRange),
            'channel_sessions' => $this->analyticsService->getChannelSessions($dateRange),
            'sessions' => $this->analyticsService->getSessions($dateRange),
            'sessions_by_device' => $this->analyticsService->getSessionsByDevice($dateRange),
            'pageviews' => $this->analyticsService->getPageviews($dateRange)
        ]);
    }
    
    public function getTopCountries(Request $request)
    {
        return response()->json([
            'countries_data' => $this->analyticsService->getTop10Countries(),
            'sessions_chart' => $this->analyticsService->getSessionsChart(),
            'pageviews_chart' => $this->analyticsService->getPageviewsChart()
        ]);
    }
}

4. Content Management Implementation (Components 3-11)
PHP
// app/Http/Controllers/API/SlideBannerController.php
<?php
namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\SlideBanner;
use App\Http\Requests\SlideBanner\CreateSlideBannerRequest;
use App\Services\FileUploadService;

class SlideBannerController extends Controller
{
    protected $fileUploadService;
    
    public function __construct(FileUploadService $fileUploadService)
    {
        $this->middleware('role:administrator,commercial_team');
        $this->fileUploadService = $fileUploadService;
    }
    
    public function index(Request $request)
    {
        $banners = SlideBanner::query()
            ->when($request->title, function($q, $title) {
                return $q->where('title', 'like', "%{$title}%");
            })
            ->when($request->valid_from, function($q, $date) {
                return $q->where('valid_from', '>=', $date);
            })
            ->when($request->valid_to, function($q, $date) {
                return $q->where('valid_to', '<=', $date);
            })
            ->when($request->is_active !== null, function($q) use ($request) {
                return $q->where('is_active', $request->is_active);
            })
            ->paginate(10);
            
        return response()->json($banners);
    }
    
    public function store(CreateSlideBannerRequest $request)
    {
        $data = $request->validated();
        
        if ($request->hasFile('image')) {
            $data['image'] = $this->fileUploadService->upload(
                $request->file('image'), 
                'banners'
            );
        }
        
        $banner = SlideBanner::create($data);
        
        return response()->json($banner, 201);
    }
}

* All codes above are examples, you can modify it to suit the requirements better.

Phase 3: Advanced Features* (Week 3-8)

/// Rich Text Editor Integration USING Quill package ///

PHP
// app/Services/ContentService.php
<?php
namespace App\Services;

class ContentService
{
    public function processRichTextContent($content, $uploadedImages = [])
    {
        // Process WordPress-style editor content
        // Handle image uploads and embed them in content
        // Sanitize HTML content
        // Generate SEO-friendly slugs
        
        foreach ($uploadedImages as $image) {
            $imagePath = $this->fileUploadService->upload($image, 'content');
            $content = str_replace($image->getClientOriginalName(), $imagePath, $content);
        }
        
        return $content;
    }
    
    public function createApprovalWorkflow($contentType, $contentId, $authorId, $changes)
    {
        // Implementation for approval workflow
        // Store pending changes for Security Printing & Digital Solutions
    }
}

/// File Upload & Security ///

PHP
// app/Services/FileUploadService.php
<?php
namespace App\Services;

use Intervention\Image\Facades\Image;

class FileUploadService
{
    public function upload($file, $folder, $resize = null)
    {
        // Validate file type and size
        $this->validateFile($file);
        
        // Generate unique filename
        $filename = time() . '_' . uniqid() . '.' . $file->getClientOriginalExtension();
        
        // Store file
        $path = $file->storeAs("uploads/{$folder}", $filename, 'public');
        
        // Resize image if needed
        if ($resize && in_array($file->getClientOriginalExtension(), ['jpg', 'jpeg', 'png'])) {
            $this->resizeImage(storage_path("app/public/{$path}"), $resize);
        }
        
        return $path;
    }
    
    private function validateFile($file)
    {
        $allowedTypes = ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx'];
        $maxSize = 10 * 1024 * 1024; // 10MB
        
        if (!in_array($file->getClientOriginalExtension(), $allowedTypes)) {
            throw new \InvalidArgumentException('File type not allowed');
        }
        
        if ($file->getSize() > $maxSize) {
            throw new \InvalidArgumentException('File size too large');
        }
    }
}

/// Phase 4: Angular Frontend Integration ///
Core Services
TypeScript
// src/app/core/services/api.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) {}

  // Generic API methods
  get<T>(endpoint: string, params?: any): Observable<T> {
    let httpParams = new HttpParams();
    if (params) {
      Object.keys(params).forEach(key => {
        httpParams = httpParams.set(key, params[key]);
      });
    }
    return this.http.get<T>(`${this.apiUrl}/${endpoint}`, { params: httpParams });
  }

  post<T>(endpoint: string, data: any): Observable<T> {
    return this.http.post<T>(`${this.apiUrl}/${endpoint}`, data);
  }

  // Content-specific methods
  getSlideBanners(): Observable<any> {
    return this.get('slide-banners', { is_active: true });
  }

  getMediaNews(params?: any): Observable<any> {
    return this.get('media-news', params);
  }

  getServices(): Observable<any> {
    return this.get('services', { visibility: 'public' });
  }
}
Component Implementation
TypeScript
// src/app/features/home/components/hero-slider/hero-slider.component.ts
import { Component, OnInit } from '@angular/core';
import { ApiService } from '../../../../core/services/api.service';

@Component({
  selector: 'app-hero-slider',
  templateUrl: './hero-slider.component.html',
  styleUrls: ['./hero-slider.component.scss']
})
export class HeroSliderComponent implements OnInit {
  banners: any[] = [];
  loading = true;

  constructor(private apiService: ApiService) {}

  ngOnInit(): void {
    this.loadBanners();
  }

  loadBanners(): void {
    this.apiService.getSlideBanners().subscribe({
      next: (response) => {
        this.banners = response.data;
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading banners:', error);
        this.loading = false;
      }
    });
  }
}


* All codes above are examples, you can add/modify it to suit the requirements better.

======================================================

Key Security & Performance Considerations

Security:
- Input validation and sanitization
- File upload security
- JWT token management
- CORS configuration
- Rate limiting

Performance:
- Database indexing (already defined in schema)
- Image optimization
- API response caching
- Lazy loading for Angular components

SEO:
- Meta tags management
- Structured data
- Sitemap generation
- URL optimization

======================================================
NOTES AND REFERENCES (refer here)
======================================================
Database Scheme Draft:

User
- ID
- User ID (Format: "NEXG0000" - 0000 is random-generated number, unique number must not have identical with other users)
- Avatar Image (by default null, later on optional can upload own)
- First Name
- Last Name
- Email
- Email Verified At
- Username
- Password (hashed)
- Role ID
- Last Login Access
- Role Permissions
- Is Active
- Remember Token
- Timestamps

Roles
- ID
- Role Name
- Role Display Name
- Role Description
- Role Permissions
- Is Active
- Timestamps

User Roles
- ID
- User ID
- Role ID
- Assigned At
- Timestamps

Header
- ID
- Header Title
- Header URL
- Timestamps

Slide Banner
- ID
- Title
- Description
- Valid From (Format: dd/MM/YYYY)
- Image
- Is Active
- Link URL
- Timestamps

Media News
- ID
- News Title
- News Descriptions
- News Slug
- News Category
- News Image Cover
- Year
- Image Gallery
- File Image Count
- Publish Date
- Visibility
- Timestamps

Event and Activities
- ID
- Event Title
- Event Descriptions
- Event Slug
- Event Category
- Event Image Cover
- Year
- Image Gallery
- File Image Count
- Publish Date
- Visibility
- Timestamps

Services
- ID
- Service Title
- Service Category (Security Printing / Digital Solutions)
- Service Descriptions
- Service Slug
- Image
- File Image Count
- Publish Date
- Visibility
- Timestamps

Leadership Team
- ID
- Team Name
- Display Order
- Timestamps

Leadership Team Members
- ID
- Leadership Team ID
- Member Name
- Member Position
- Member Description
- Member Image
- Display Order
- Is Active
- Timestamps

Corporate Overview
- ID
- Title Heading
- Descriptions
- Timestamps

Corporate Structure
- ID
- Images
- Timestamps

Corporate Milestone
- ID
- Images
- Timestamps

Awards
- ID
- Award Name
- Award Description
- Images
- Timestamps

Sustainability
- ID
- Title
- Descriptions
- Image
- Timestamps

Careers
- ID
- Job Title
- Job Description
- Publish Date
- Is Active
- Visibility
- Timestamps

Contact Us
- ID
- Company Address
- Company Email Address
- Company Telephone Number
- Timestamps

Footer
- ID
- Footer Title
- Footer URL
- Timestamps

Concept/Idea:

1.	Dashboard
-	Overview: It has 4 tabs:
i.	Web Traffic: Components: (a) Total Unique Pageviews, (b) Average Time(s) on Page, (c) Page Exit Percentage, (d) Bounce %, (e) Device Sessions, (f) Channel Sessions, (g) Sessions, (h) Sessions by Device, and (i) Pageviews (Has weekly filter dates)
ii.	Top 10 Countries (Based on Sessions): Components: (a) Total Unique Pageviews, (b) Average Time(s) on Page, (c) Page Exit Percentage, (d) Bounce %, (e) List of Countries that has sessions with the website in DataTable (First column lists down top 10 highest count of countries, second column lists down sessions count for each country, third column lists down average unique pageviews count for each country, and fourth column lists down average time(s) on page for each country. Last row of the DataTable should display the total count of all sessions, average unique pageviews, and average time(s) on page.), (f) Sessions (in bar graph; Y-axis is total session count, X-axis is the month of the year), and (g) Pageviews (in bar graph; Y-axis is total pageviews count, X-axis is the month of the year),
2.	HomePage
-	Slider Banner: Components: in DataTable format;  (a) Banner Title, (b) Banner Description, (c) “Valid From” period (DD-MM-YYYY format), (d) “Valid To" period (DD-MM-YYYY), (e) Preview Banner Image, (f) Active Status (YES/NO), (g) Action Buttons (Edit Banner, Delete Banner). Inside the DataTable before record rows, has filters for Title, Description, Valid From, Valid To, Active Status), can also add column for new banners, when click preview image, it popups and darken the background until user click close.
-	Media News: Components: in DataTable format: (a) News Title, (b) Year Published, (c) File Path, (d) Upload Date (Month Day, Year. 0:00 AM format), (e) Visible to users (shows green circle – Visible, red circle – Not visible), and (f) Action buttons (View button – view preview news in user view, Edit button – modify media news record, Delete button – Remove media news from records)
-	Services: It has 2 sub-pages:
i.	Security Printing (Preview Page): Has page changes approval stage (contains author name and email address, comment
ii.	Digital Solutions (Preview Page): Has page changes approval stage (contains author name and email address, comment)
3.	About Us
-	Has five different editors for five sub-pages; each one has its own text editor (similar like Wordpress Classic Editor) and can upload images by [Drag and Drop files OR Browser File]
4.	Security Printing and Digital Solutions (same)
-	Published Date and Time
-	Title
-	Publish Toggle
-	Each with text editor (similar like Wordpress Classic Editor) and can upload images by [Drag and Drop files OR Browser File]
5.	Users Management
-	Name (and email address) [Optional sorting by alphabetical order]
-	Permissions
-	Roles
-	Last Access (D/MM/YYYY format)
-	Filter users by name on top
-	For Admin and IT, they can invite new users by clicking the “Invite new users”